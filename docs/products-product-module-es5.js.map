{"version":3,"sources":["webpack:///src/app/products/product-edit/product-edit.component.ts","webpack:///src/app/products/product-edit/product-edit.component.html","webpack:///src/app/products/product-list/product-list.component.ts","webpack:///src/app/products/product-list/product-list.component.html","webpack:///src/app/products/product-shell/product-shell.component.ts","webpack:///src/app/products/product-shell/product-shell.component.html","webpack:///src/app/products/product.module.ts","webpack:///src/app/products/product.service.ts","webpack:///src/app/products/state/actions/index.ts","webpack:///src/app/products/state/actions/product-api.actions.ts","webpack:///src/app/products/state/actions/product-page.actions.ts","webpack:///src/app/products/state/index.ts","webpack:///src/app/products/state/product.effects.ts","webpack:///src/app/products/state/product.reducer.ts","webpack:///src/app/shared/generic-validator.ts","webpack:///src/app/shared/number.validator.ts"],"names":["ProductEditComponent","fb","pageTitle","create","update","clearCurrent","displayMessage","validationMessages","productName","required","minlength","maxlength","productCode","starRating","range","genericValidator","productForm","group","minLength","maxLength","description","valueChanges","subscribe","processMessages","changes","selectedProduct","product","currentValue","displayProduct","reset","id","patchValue","confirm","emit","valid","dirty","value","selector","templateUrl","ProductListComponent","displayCodeChanged","initializeNewProduct","productWasSelected","checkChanged","newProduct","styleUrls","changeDetection","OnPush","ProductShellComponent","store","products$","select","errorMessage$","dispatch","loadProducts","selectedProduct$","displayCode$","toggleProductCode","initializeCurrentProduct","setCurrentProduct","currentProductId","deleteProduct","productId","clearCurrentProduct","createProduct","updateProduct","productSelected","clearProduct","saveProduct","productRoutes","path","component","ProductModule","forChild","forFeature","imports","declarations","ProductService","http","productsUrl","get","pipe","data","console","log","JSON","stringify","handleError","headers","post","url","put","err","errorMessage","error","ErrorEvent","message","status","body","providedIn","loadProductsSuccess","loadProductsFailure","updateProductSuccess","updateProductFailure","createProductSuccess","createProductFailure","deleteProductSuccess","deleteProductFailure","getProductFeatureState","getShowProductCode","state","showProductCode","getCurrentProductId","getCurrentProduct","products","find","p","getProducts","getError","ProductEffects","actions$","productService","loadProducts$","updateProduct$","action","createProduct$","deleteProduct$","initialState","productReducer","updatedProducts","map","item","filter","GenericValidator","container","messages","controlKey","controls","hasOwnProperty","c","childMessages","Object","assign","touched","errors","keys","messageKey","NumberValidators","min","max","isNaN"],"mappings":"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","file":"products-product-module-es5.js","sourcesContent":["import {\n  Component,\n  OnInit,\n  Input,\n  EventEmitter,\n  Output,\n  OnChanges,\n  SimpleChanges,\n} from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\nimport { Product } from '../product';\nimport { GenericValidator } from '../../shared/generic-validator';\nimport { NumberValidators } from '../../shared/number.validator';\n\n@Component({\n  selector: 'pm-product-edit',\n  templateUrl: './product-edit.component.html',\n})\nexport class ProductEditComponent implements OnInit, OnChanges {\n  pageTitle = 'Product Edit';\n  @Input() errorMessage: string;\n  @Input() selectedProduct: Product;\n  @Output() create = new EventEmitter<Product>();\n  @Output() update = new EventEmitter<Product>();\n  @Output() delete = new EventEmitter<Product>();\n  @Output() clearCurrent = new EventEmitter<void>();\n\n  productForm: FormGroup;\n\n  // Use with the generic validation message class\n  displayMessage: { [key: string]: string } = {};\n  private validationMessages: { [key: string]: { [key: string]: string } };\n  private genericValidator: GenericValidator;\n\n  constructor(private fb: FormBuilder) {\n    // Defines all of the validation messages for the form.\n    // These could instead be retrieved from a file or database.\n    this.validationMessages = {\n      productName: {\n        required: 'Product name is required.',\n        minlength: 'Product name must be at least three characters.',\n        maxlength: 'Product name cannot exceed 50 characters.',\n      },\n      productCode: {\n        required: 'Product code is required.',\n      },\n      starRating: {\n        range: 'Rate the product between 1 (lowest) and 5 (highest).',\n      },\n    };\n\n    // Define an instance of the validator for use with this form,\n    // passing in this form's set of validation messages.\n    this.genericValidator = new GenericValidator(this.validationMessages);\n  }\n\n  ngOnInit(): void {\n    // Define the form group\n    this.productForm = this.fb.group({\n      productName: [\n        '',\n        [\n          Validators.required,\n          Validators.minLength(3),\n          Validators.maxLength(50),\n        ],\n      ],\n      productCode: ['', Validators.required],\n      starRating: ['', NumberValidators.range(1, 5)],\n      description: '',\n    });\n\n    // Watch for value changes for validation\n    this.productForm.valueChanges.subscribe(\n      () =>\n        (this.displayMessage = this.genericValidator.processMessages(\n          this.productForm\n        ))\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    // patch form with value from the store\n    if (changes.selectedProduct) {\n      const product = changes.selectedProduct.currentValue as Product;\n      this.displayProduct(product);\n    }\n  }\n\n  // Also validate on blur\n  // Helpful if the user tabs through required fields\n  blur(): void {\n    this.displayMessage = this.genericValidator.processMessages(\n      this.productForm\n    );\n  }\n\n  displayProduct(product: Product | null): void {\n    if (product && this.productForm) {\n      // Reset the form back to pristine\n      this.productForm.reset();\n\n      // Display the appropriate page title\n      if (product.id === 0) {\n        this.pageTitle = 'Add Product';\n      } else {\n        this.pageTitle = `Edit Product: ${product.productName}`;\n      }\n\n      // Update the data on the form\n      this.productForm.patchValue({\n        productName: product.productName,\n        productCode: product.productCode,\n        starRating: product.starRating,\n        description: product.description,\n      });\n    }\n  }\n\n  cancelEdit(): void {\n    // Redisplay the currently selected product\n    // replacing any edits made\n    this.displayProduct(this.selectedProduct);\n  }\n\n  deleteProduct(): void {\n    if (this.selectedProduct && this.selectedProduct.id) {\n      if (\n        confirm(\n          `Really delete the product: ${this.selectedProduct.productName}?`\n        )\n      ) {\n        this.delete.emit(this.selectedProduct);\n      }\n    } else {\n      // No need to delete, it was never saved\n      this.clearCurrent.emit();\n    }\n  }\n\n  saveProduct(): void {\n    if (this.productForm.valid) {\n      if (this.productForm.dirty) {\n        // Copy over all of the original product properties\n        // Then copy over the values from the form\n        // This ensures values not on the form, such as the Id, are retained\n        const product = { ...this.selectedProduct, ...this.productForm.value };\n\n        if (product.id === 0) {\n          this.create.emit(product);\n        } else {\n          this.update.emit(product);\n        }\n      }\n    }\n  }\n}\n","<div class=\"card\" *ngIf=\"selectedProduct\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n  <div class=\"card-body\">\n    <form novalidate (ngSubmit)=\"saveProduct()\" [formGroup]=\"productForm\">\n      <fieldset>\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productNameId\"\n            >Product Name</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productName }\"\n              class=\"form-control\"\n              id=\"productNameId\"\n              type=\"text\"\n              placeholder=\"Name (required)\"\n              formControlName=\"productName\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productName\">\n              {{ displayMessage.productName }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"productCodeId\"\n            >Product Code</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.productCode }\"\n              class=\"form-control\"\n              id=\"productCodeId\"\n              type=\"text\"\n              placeholder=\"Code (required)\"\n              formControlName=\"productCode\"\n              (blur)=\"blur()\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.productCode\">\n              {{ displayMessage.productCode }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"starRatingId\"\n            >Star Rating (1-5)</label\n          >\n\n          <div class=\"col-md-9\">\n            <input\n              [ngClass]=\"{ 'is-invalid': displayMessage.starRating }\"\n              class=\"form-control\"\n              id=\"starRatingId\"\n              type=\"text\"\n              placeholder=\"Rating\"\n              formControlName=\"starRating\"\n            />\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.starRating\">\n              {{ displayMessage.starRating }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group row\">\n          <label class=\"col-md-3 col-form-label\" for=\"descriptionId\"\n            >Description</label\n          >\n\n          <div class=\"col-md-9\">\n            <textarea\n              [ngClass]=\"{ 'is-invalid': displayMessage.description }\"\n              class=\"form-control\"\n              id=\"descriptionId\"\n              placeholder=\"Description\"\n              rows=\"3\"\n              formControlName=\"description\"\n            >\n            </textarea>\n            <span class=\"invalid-feedback\" *ngIf=\"displayMessage.description\">\n              {{ displayMessage.description }}\n            </span>\n          </div>\n        </div>\n\n        <div class=\"form-group\">\n          <div class=\"col-md-10 col-md-offset-2\">\n            <span>\n              <button\n                class=\"btn btn-primary\"\n                type=\"submit\"\n                style=\"min-width: 120px; margin-right: 10px\"\n                [disabled]=\"!productForm.valid || !productForm.dirty\"\n              >\n                Save\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"min-width: 120px; margin-right: 10px\"\n                (click)=\"cancelEdit()\"\n              >\n                Cancel\n              </button>\n            </span>\n            <span>\n              <button\n                class=\"btn btn-light\"\n                type=\"button\"\n                style=\"min-width: 120px\"\n                (click)=\"deleteProduct()\"\n              >\n                Delete\n              </button>\n            </span>\n          </div>\n        </div>\n      </fieldset>\n    </form>\n  </div>\n</div>\n<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import {\n  Component,\n  Input,\n  Output,\n  EventEmitter,\n  ChangeDetectionStrategy,\n} from '@angular/core';\nimport { Product } from '../product';\n\n@Component({\n  selector: 'pm-product-list',\n  templateUrl: './product-list.component.html',\n  styleUrls: ['./product-list.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ProductListComponent {\n  pageTitle = 'Products';\n\n  @Input() errorMessage: string;\n  @Input() products: Product[];\n  @Input() displayCode: boolean;\n  @Input() selectedProduct: Product;\n  @Output() displayCodeChanged = new EventEmitter<void>();\n  @Output() initializeNewProduct = new EventEmitter<void>();\n  @Output() productWasSelected = new EventEmitter<Product>();\n\n  checkChanged(): void {\n    this.displayCodeChanged.emit();\n  }\n\n  newProduct(): void {\n    this.initializeNewProduct.emit();\n  }\n\n  productSelected(product: Product): void {\n    this.productWasSelected.emit(product);\n  }\n}\n","<div class=\"card\">\n  <div class=\"card-header\">\n    {{ pageTitle }}\n  </div>\n\n  <div class=\"card-body\" *ngIf=\"products\">\n    <div class=\"list-group\">\n      <button\n        class=\"list-group-item list-group-item-action rounded-0\"\n        *ngFor=\"let product of products\"\n        [ngClass]=\"{ active: product?.id === selectedProduct?.id }\"\n        (click)=\"productSelected(product)\"\n      >\n        {{ product.productName }}\n        <ng-container *ngIf=\"displayCode\">\n          ({{ product.productCode }})\n        </ng-container>\n      </button>\n    </div>\n  </div>\n\n  <div class=\"card-footer\">\n    <div class=\"row\">\n      <div class=\"form-check col-md-7\">\n        <label>\n          <input\n            class=\"form-check-input\"\n            type=\"checkbox\"\n            (change)=\"checkChanged()\"\n            [checked]=\"displayCode\"\n          />\n          Display Product Code\n        </label>\n      </div>\n      <div class=\"col-md-4 text-right\">\n        <button\n          style=\"min-width: 120px\"\n          class=\"btn btn-primary\"\n          (click)=\"newProduct()\"\n        >\n          Add\n        </button>\n      </div>\n    </div>\n  </div>\n</div>\n<div *ngIf=\"errorMessage\" class=\"alert alert-danger\">\n  Error: {{ errorMessage }}\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport { Product } from '../product';\n\n/* NgRx */\nimport { Store } from '@ngrx/store';\nimport {\n  State,\n  getShowProductCode,\n  getCurrentProduct,\n  getProducts,\n  getError,\n} from '../state';\n\nimport { ProductPageActions } from '../state/actions';\n\n@Component({\n  templateUrl: './product-shell.component.html',\n})\nexport class ProductShellComponent implements OnInit {\n  displayCode$: Observable<boolean>;\n  selectedProduct$: Observable<Product>;\n  products$: Observable<Product[]>;\n  errorMessage$: Observable<string>;\n\n  constructor(private store: Store<State>) {}\n\n  ngOnInit(): void {\n    // Do NOT subscribe here because it uses an async pipe\n    // This gets the initial values until the load is complete.\n    this.products$ = this.store.select(getProducts);\n\n    // Do NOT subscribe here because it uses an async pipe\n    this.errorMessage$ = this.store.select(getError);\n\n    this.store.dispatch(ProductPageActions.loadProducts());\n\n    // Do NOT subscribe here because it uses an async pipe\n    this.selectedProduct$ = this.store.select(getCurrentProduct);\n\n    // Do NOT subscribe here because it uses an async pipe\n    this.displayCode$ = this.store.select(getShowProductCode);\n  }\n\n  checkChanged(): void {\n    this.store.dispatch(ProductPageActions.toggleProductCode());\n  }\n\n  newProduct(): void {\n    this.store.dispatch(ProductPageActions.initializeCurrentProduct());\n  }\n\n  productSelected(product: Product): void {\n    this.store.dispatch(\n      ProductPageActions.setCurrentProduct({ currentProductId: product.id })\n    );\n  }\n\n  deleteProduct(product: Product): void {\n    this.store.dispatch(\n      ProductPageActions.deleteProduct({ productId: product.id })\n    );\n  }\n\n  clearProduct(): void {\n    this.store.dispatch(ProductPageActions.clearCurrentProduct());\n  }\n  saveProduct(product: Product): void {\n    this.store.dispatch(ProductPageActions.createProduct({ product }));\n  }\n\n  updateProduct(product: Product): void {\n    this.store.dispatch(ProductPageActions.updateProduct({ product }));\n  }\n}\n","<div class=\"row\">\n  <div class=\"col-md-4\">\n    <pm-product-list\n      [displayCode]=\"displayCode$ | async\"\n      [products]=\"products$ | async\"\n      [selectedProduct]=\"selectedProduct$ | async\"\n      [errorMessage]=\"errorMessage$ | async\"\n      (displayCodeChanged)=\"checkChanged()\"\n      (initializeNewProduct)=\"newProduct()\"\n      (productWasSelected)=\"productSelected($any($event))\"\n    ></pm-product-list>\n  </div>\n  <div class=\"col-md-8\">\n    <pm-product-edit\n      [selectedProduct]=\"selectedProduct$ | async\"\n      [errorMessage]=\"errorMessage$ | async\"\n      (clearCurrent)=\"clearProduct()\"\n      (update)=\"updateProduct($any($event))\"\n      (delete)=\"deleteProduct($any($event))\"\n      (create)=\"saveProduct($any($event))\"\n    ></pm-product-edit>\n  </div>\n</div>\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { SharedModule } from '../shared/shared.module';\n\nimport { ProductShellComponent } from './product-shell/product-shell.component';\nimport { ProductListComponent } from './product-list/product-list.component';\nimport { ProductEditComponent } from './product-edit/product-edit.component';\n\n/* NgRx */\nimport { StoreModule } from '@ngrx/store';\nimport { productReducer } from './state/product.reducer';\nimport { EffectsModule } from '@ngrx/effects';\nimport { ProductEffects } from './state/product.effects';\n\nconst productRoutes: Routes = [{ path: '', component: ProductShellComponent }];\n\n@NgModule({\n  imports: [\n    SharedModule,\n    RouterModule.forChild(productRoutes),\n    StoreModule.forFeature('products', productReducer),\n    EffectsModule.forFeature([ProductEffects]),\n  ],\n  declarations: [\n    ProductShellComponent,\n    ProductListComponent,\n    ProductEditComponent,\n  ],\n})\nexport class ProductModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\n\nimport { Observable, throwError } from 'rxjs';\nimport { catchError, tap, map } from 'rxjs/operators';\n\nimport { Product } from './product';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ProductService {\n  private productsUrl = 'api/products';\n\n  constructor(private http: HttpClient) {}\n\n  getProducts(): Observable<Product[]> {\n    return this.http.get<Product[]>(this.productsUrl).pipe(\n      tap((data) => console.log(JSON.stringify(data))),\n      catchError(this.handleError)\n    );\n  }\n\n  createProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    // Product Id must be null for the Web API to assign an Id\n    const newProduct = { ...product, id: null };\n    return this.http\n      .post<Product>(this.productsUrl, newProduct, { headers })\n      .pipe(\n        tap((data) => console.log('createProduct: ' + JSON.stringify(data))),\n        catchError(this.handleError)\n      );\n  }\n\n  deleteProduct(id: number): Observable<{}> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.productsUrl}/${id}`;\n    return this.http.delete<Product>(url, { headers }).pipe(\n      tap((data) => console.log('deleteProduct: ' + id)),\n      catchError(this.handleError)\n    );\n  }\n\n  updateProduct(product: Product): Observable<Product> {\n    const headers = new HttpHeaders({ 'Content-Type': 'application/json' });\n    const url = `${this.productsUrl}/${product.id}`;\n    return this.http.put<Product>(url, product, { headers }).pipe(\n      tap(() => console.log('updateProduct: ' + product.id)),\n      // Return the product on an update\n      map(() => product),\n      catchError(this.handleError)\n    );\n  }\n\n  private handleError(err: any) {\n    // in a real world app, we may send the server to some remote logging infrastructure\n    // instead of just logging it to the console\n    let errorMessage: string;\n    if (err.error instanceof ErrorEvent) {\n      // A client-side or network error occurred. Handle it accordingly.\n      errorMessage = `An error occurred: ${err.error.message}`;\n    } else {\n      // The backend returned an unsuccessful response code.\n      // The response body may contain clues as to what went wrong,\n      errorMessage = `Backend returned code ${err.status}: ${err.body.error}`;\n    }\n    console.error(err);\n    return throwError(errorMessage);\n  }\n}\n","import * as ProductPageActions from './product-page.actions';\nimport * as ProductApiActions from './product-api.actions';\n\nexport { ProductPageActions, ProductApiActions };\n","import { Product } from '../../product';\n\n/* NgRx*/\nimport { createAction, props } from '@ngrx/store';\n\nexport const loadProductsSuccess = createAction(\n  '[Product API] Load Success',\n  props<{ products: Product[] }>()\n);\n\nexport const loadProductsFailure = createAction(\n  '[Product API] Load Fail',\n  props<{ error: string }>()\n);\n\nexport const updateProductSuccess = createAction(\n  '[Product API] Update Product Success',\n  props<{ product: Product }>()\n);\n\nexport const updateProductFailure = createAction(\n  '[Product API] Update Product Fail',\n  props<{ error: string }>()\n);\n\nexport const createProductSuccess = createAction(\n  '[Product API] Create Product Success',\n  props<{ product: Product }>()\n);\n\nexport const createProductFailure = createAction(\n  '[Product API] Create Product Fail',\n  props<{ error: string }>()\n);\n\nexport const deleteProductSuccess = createAction(\n  '[Product API] Delete Product Success',\n  props<{ productId: number }>()\n);\n\nexport const deleteProductFailure = createAction(\n  '[Product API] Delete Product Fail',\n  props<{ error: string }>()\n);\n","import { Product } from '../../product';\n\n/* NgRx*/\nimport { createAction, props } from '@ngrx/store';\n\nexport const toggleProductCode = createAction(\n  '[Product Page] Toggle Product Code'\n);\n\nexport const setCurrentProduct = createAction(\n  '[Product Page] Set Current Product',\n  props<{ currentProductId: number }>()\n);\n\nexport const clearCurrentProduct = createAction(\n  '[Product Page] Clear Current Product'\n);\n\nexport const initializeCurrentProduct = createAction(\n  '[Product Page] Initialize Current Product'\n);\n\nexport const loadProducts = createAction('[Product Page] Load');\n\nexport const updateProduct = createAction(\n  '[Product Page] Update Product',\n  props<{ product: Product }>()\n);\n\nexport const createProduct = createAction(\n  '[Product Page] Create Product',\n  props<{ product: Product }>()\n);\n\nexport const deleteProduct = createAction(\n  '[Product Page] Delete Product',\n  props<{ productId: number }>()\n);\n","import { createFeatureSelector, createSelector } from '@ngrx/store';\nimport * as AppState from '../../state/app.state';\nimport { ProductState } from './product.reducer';\n\n// Extends the app state to include the product feature.\n// This is required because products are lazy loaded.\n// So the reference to ProductState cannot be added to app.state.ts directly.\nexport interface State extends AppState.State {\n  products: ProductState;\n}\n\n// Selector functions\nconst getProductFeatureState = createFeatureSelector<ProductState>('products');\n\nexport const getShowProductCode = createSelector(\n  getProductFeatureState,\n  (state) => state.showProductCode\n);\n\nexport const getCurrentProductId = createSelector(\n  getProductFeatureState,\n  (state) => state.currentProductId\n);\n\nexport const getCurrentProduct = createSelector(\n  getProductFeatureState,\n  getCurrentProductId,\n  (state, currentProductId) => {\n    if (currentProductId === 0) {\n      return {\n        id: 0,\n        productName: '',\n        productCode: 'New',\n        description: '',\n        starRating: 0,\n      };\n    } else {\n      return currentProductId\n        ? state.products.find((p) => p.id === currentProductId)\n        : null;\n    }\n  }\n);\n\nexport const getProducts = createSelector(\n  getProductFeatureState,\n  (state) => state.products\n);\n\nexport const getError = createSelector(\n  getProductFeatureState,\n  (state) => state.error\n);\n","import { Injectable } from '@angular/core';\n\nimport { mergeMap, map, catchError, concatMap } from 'rxjs/operators';\nimport { of } from 'rxjs';\nimport { ProductService } from '../product.service';\n\n/* NgRx */\nimport { Actions, createEffect, ofType } from '@ngrx/effects';\nimport { ProductPageActions, ProductApiActions } from './actions';\n\n@Injectable()\nexport class ProductEffects {\n  constructor(\n    private actions$: Actions,\n    private productService: ProductService\n  ) {}\n\n  loadProducts$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ProductPageActions.loadProducts),\n      mergeMap(() =>\n        this.productService.getProducts().pipe(\n          map((products) =>\n            ProductApiActions.loadProductsSuccess({ products })\n          ),\n          catchError((error) =>\n            of(ProductApiActions.loadProductsFailure({ error }))\n          )\n        )\n      )\n    );\n  });\n\n  updateProduct$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ProductPageActions.updateProduct),\n      concatMap((action) =>\n        this.productService.updateProduct(action.product).pipe(\n          map((product) => ProductApiActions.updateProductSuccess({ product })),\n          catchError((error) =>\n            of(ProductApiActions.updateProductFailure({ error }))\n          )\n        )\n      )\n    );\n  });\n\n  createProduct$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ProductPageActions.createProduct),\n      concatMap((action) =>\n        this.productService.createProduct(action.product).pipe(\n          map((product) => ProductApiActions.createProductSuccess({ product })),\n          catchError((error) =>\n            of(ProductApiActions.createProductFailure({ error }))\n          )\n        )\n      )\n    );\n  });\n\n  deleteProduct$ = createEffect(() => {\n    return this.actions$.pipe(\n      ofType(ProductPageActions.deleteProduct),\n      mergeMap((action) =>\n        this.productService.deleteProduct(action.productId).pipe(\n          map(() =>\n            ProductApiActions.deleteProductSuccess({\n              productId: action.productId,\n            })\n          ),\n          catchError((error) =>\n            of(ProductApiActions.deleteProductFailure({ error }))\n          )\n        )\n      )\n    );\n  });\n}\n","import { Product } from '../product';\n\n/* NgRx */\nimport { createReducer, on } from '@ngrx/store';\nimport { ProductApiActions, ProductPageActions } from './actions';\n\n// State for this feature (Product)\nexport interface ProductState {\n  showProductCode: boolean;\n  currentProductId: number | null;\n  products: Product[];\n  error: string;\n}\n\nconst initialState: ProductState = {\n  showProductCode: true,\n  currentProductId: null,\n  products: [],\n  error: '',\n};\n\nexport const productReducer = createReducer<ProductState>(\n  initialState,\n  on(ProductPageActions.toggleProductCode, (state): ProductState => {\n    return {\n      ...state,\n      showProductCode: !state.showProductCode,\n    };\n  }),\n  on(ProductPageActions.setCurrentProduct, (state, action): ProductState => {\n    return {\n      ...state,\n      currentProductId: action.currentProductId,\n    };\n  }),\n  on(ProductPageActions.clearCurrentProduct, (state): ProductState => {\n    return {\n      ...state,\n      currentProductId: null,\n    };\n  }),\n  on(ProductPageActions.initializeCurrentProduct, (state): ProductState => {\n    return {\n      ...state,\n      currentProductId: 0,\n    };\n  }),\n  on(ProductApiActions.loadProductsSuccess, (state, action): ProductState => {\n    return {\n      ...state,\n      products: action.products,\n      error: '',\n    };\n  }),\n  on(ProductApiActions.loadProductsFailure, (state, action): ProductState => {\n    return {\n      ...state,\n      products: [],\n      error: action.error,\n    };\n  }),\n  on(ProductApiActions.updateProductSuccess, (state, action): ProductState => {\n    const updatedProducts = state.products.map((item) =>\n      action.product.id === item.id ? action.product : item\n    );\n    return {\n      ...state,\n      products: updatedProducts,\n      currentProductId: action.product.id,\n      error: '',\n    };\n  }),\n  on(ProductApiActions.updateProductFailure, (state, action): ProductState => {\n    return {\n      ...state,\n      error: action.error,\n    };\n  }),\n  // After a create, the currentProduct is the new product.\n  on(ProductApiActions.createProductSuccess, (state, action): ProductState => {\n    return {\n      ...state,\n      products: [...state.products, action.product],\n      currentProductId: action.product.id,\n      error: '',\n    };\n  }),\n  on(ProductApiActions.createProductFailure, (state, action): ProductState => {\n    return {\n      ...state,\n      error: action.error,\n    };\n  }),\n  // After a delete, the currentProduct is null.\n  on(ProductApiActions.deleteProductSuccess, (state, action): ProductState => {\n    return {\n      ...state,\n      products: state.products.filter(\n        (product) => product.id !== action.productId\n      ),\n      currentProductId: null,\n      error: '',\n    };\n  }),\n  on(ProductApiActions.deleteProductFailure, (state, action): ProductState => {\n    return {\n      ...state,\n      error: action.error,\n    };\n  })\n);\n","import { FormGroup } from '@angular/forms';\n\n// Generic validator for Reactive forms\n// Implemented as a class, not a service, so it can retain state for multiple forms.\nexport class GenericValidator {\n  // Provide the set of valid validation messages\n  // Stucture:\n  // controlName1: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // },\n  // controlName2: {\n  //     validationRuleName1: 'Validation Message.',\n  //     validationRuleName2: 'Validation Message.'\n  // }\n  constructor(\n    private validationMessages: { [key: string]: { [key: string]: string } }\n  ) {}\n\n  // Processes each control within a FormGroup\n  // And returns a set of validation messages to display\n  // Structure\n  // controlName1: 'Validation Message.',\n  // controlName2: 'Validation Message.'\n  processMessages(container: FormGroup): { [key: string]: string } {\n    const messages = {};\n    for (const controlKey in container.controls) {\n      if (container.controls.hasOwnProperty(controlKey)) {\n        const c = container.controls[controlKey];\n        // If it is a FormGroup, process its child controls.\n        if (c instanceof FormGroup) {\n          const childMessages = this.processMessages(c);\n          Object.assign(messages, childMessages);\n        } else {\n          // Only validate if there are validation messages for the control\n          if (this.validationMessages[controlKey]) {\n            messages[controlKey] = '';\n            if ((c.dirty || c.touched) && c.errors) {\n              Object.keys(c.errors).map((messageKey) => {\n                if (this.validationMessages[controlKey][messageKey]) {\n                  messages[controlKey] +=\n                    this.validationMessages[controlKey][messageKey] + ' ';\n                }\n              });\n            }\n          }\n        }\n      }\n    }\n    return messages;\n  }\n}\n","import { AbstractControl, ValidatorFn } from '@angular/forms';\n\nexport class NumberValidators {\n  static range(min: number, max: number): ValidatorFn {\n    return (c: AbstractControl): { [key: string]: boolean } | null => {\n      if (c.value && (isNaN(c.value) || c.value < min || c.value > max)) {\n        return { range: true };\n      }\n      return null;\n    };\n  }\n}\n"]}